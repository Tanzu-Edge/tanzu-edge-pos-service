resources:
- name: source-code
  type: git
  source:
    uri: ((tanzu-edge-pos-service.codeRepo))
    branch: main
- name: config-repo
  type: git
  source:
    uri: ((tanzu-edge-pos-service.configRepo))
    branch: master
    paths:
     - "k8s/**"
- name: app-image
  type: docker-image
  source:
    repository: ((tanzu-edge-pos-service.image))
    tag: latest

jobs:
- name: continuous-integration
  plan:
    - get: source-code
      trigger: true
    - task: compile-and-test
      output_mapping:
        target: target
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: adoptopenjdk
            tag: 11-jdk-hotspot
        inputs:
          - name: source-code
        outputs:
          - name: target
        caches:
          - path: source-code/maven
        run:
          path: /bin/bash
          args:
            - -c
            - |
              cd source-code
              if [[ -d $PWD/maven && ! -d $HOME/.m2 ]]; then
                ln -s "$PWD/maven" "$HOME/.m2"
              fi
              # Added -DskipTests and -Dcheckstyle.skip to speed up task for demo purpose
              # They should not be included in a proper test pipeline
              ./mvnw package -DskipTests -Dcheckstyle.skip
              cp target/*.jar ../target
    - task: update-build-service-image
      params:
        KUBECONFIG_JSON: ((common-secrets.kubeconfigBuildServer))
      input_mapping:
        target: target
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
            tag: latest
        inputs:
          - name: target
        run:
          path: /bin/bash
          args:
            - -c
            - |
              docker login ((common-secrets.harborDomain)) -u '((common-secrets.harborUser))' -p '((common-secrets.harborPassword))'
              echo $KUBECONFIG_JSON>tools-kubeconfig.json
              export KUBECONFIG=tools-kubeconfig.json
              kubectl config set-credentials concourse --token=((common-secrets.kubernetesServiceAccountToken))
              kubectl config set-context concourse-context --cluster=devlab --user=concourse
              set +e
              kp image list -n ((tanzu-edge-pos-service.tbsNamespace)) | grep "tanzu-edge-pos-service" 
              exists=$?
              set -e

              kubectl -n concourse-main get all

              if [ $exists -eq 0 ]; then
                kp image patch tanzu-edge-pos-service \
                  --namespace ((tanzu-edge-pos-service.tbsNamespace)) \
                  --wait \
                  --local-path target/pos-data-service-0.0.1-SNAPSHOT.jar
              else
                kp image create tanzu-edge-pos-service \
                  --tag ((tanzu-edge-pos-service.image)) \
                  --namespace ((tanzu-edge-pos-service.tbsNamespace)) \
                  --wait \
                  --local-path target/pos-data-service-0.0.1-SNAPSHOT.jar
              fi


- name: continuous-deployment
  public: true
  serial: true
  plan:
    - get: app-image
      trigger: true
    - get: config-repo
    - task: create-wavefront-event
      params:
        WAVEFRONT_API_TOKEN: ((tanzu-edge-pos-service.wavefrontApiToken))
        WAVEFRONT_URL: ((tanzu-edge-pos-service.wavefrontUri))
        WAVEFRONT_DEPLOY_EVENT_NAME: ((tanzu-edge-pos-service.wavefrontDeployEventName))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
            tag: latest
        run:
          path: /bin/bash
          args:
            - -c
            - |
              set -euo pipefail

              START_TIME=$(date +%s000)
              sleep 1
              END_TIME=$(date +%s000)

              curl \
                -X POST \
                --header "Content-Type: application/json" \
                --header "Accept: application/json" \
                --header "Authorization: Bearer ${WAVEFRONT_API_TOKEN}" \
                -d "{
                  \"name\": \"${WAVEFRONT_DEPLOY_EVENT_NAME}\",
                  \"annotations\": {
                    \"severity\": \"info\",
                    \"type\": \"image deploy\",
                    \"details\": \"new tanzu-edge-pos-service image deployed\"
                  },
                  \"startTime\": "${START_TIME}",
                  \"endTime\": "${END_TIME}"
                }" "${WAVEFRONT_URL}/api/v2/event"

    - task: deploy-app
      params:
        KUBECONFIG_JSON: ((common-secrets.kubeconfigAppServer))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            tag: latest
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
        inputs:
          - name: config-repo
          - name: app-image
        run:
          path: /bin/bash
          args:
            - -c
            - |
              export DIGEST=$(cat app-image/digest)

              # TODO Need to setup the kubeconfig
              echo $KUBECONFIG_JSON>run-kubeconfig.json
              export KUBECONFIG=run-kubeconfig.json

              cat > config-repo/k8s/values.yml << EOF
              #@data/values
              ---
              tanzu-edge-pos-service:
                host: ((tanzu-edge-pos-service.host))
                image: ((tanzu-edge-pos-service.image))@$DIGEST
                wavefront:
                  applicationName: ((tanzu-edge-pos-service.wavefrontApplicationName))
                  uri: ((tanzu-edge-pos-service.wavefrontUri))
                  apiToken: ((tanzu-edge-pos-service.wavefrontApiToken))
              EOF
              cat config-repo/k8s/values.yml
              
              ytt -f config-repo/k8s --ignore-unknown-comments | kapp deploy -n tanzu-edge-pos -a tanzu-edge-pos-service -y -f -


