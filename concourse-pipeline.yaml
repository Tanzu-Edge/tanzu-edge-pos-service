resources:
- name: source-code
  type: git
  source:
    uri: ((tanzu-edge-pos-service.codeRepo))
    branch: main
- name: config-repo
  type: git
  source:
    uri: ((tanzu-edge-pos-service.configRepo))
    branch: master
    paths:
     - "k8s/**"
- name: app-image
  type: docker-image
  source:
    repository: ((tanzu-edge-pos-service.image))
    tag: latest

jobs:
- name: continuous-integration
  plan:
    - get: source-code
      trigger: true
    - task: compile-and-test
      output_mapping:
        target: target
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: adoptopenjdk
            tag: 11-jdk-hotspot
        inputs:
          - name: source-code
        outputs:
          - name: target
        caches:
          - path: source-code/maven
        run:
          path: /bin/bash
          args:
            - -c
            - |
              cd source-code
              if [[ -d $PWD/maven && ! -d $HOME/.m2 ]]; then
                ln -s "$PWD/maven" "$HOME/.m2"
              fi
              # Added -DskipTests and -Dcheckstyle.skip to speed up task for demo purpose
              # They should not be included in a proper test pipeline
              ./mvnw package -DskipTests -Dcheckstyle.skip
              cp target/*.jar ../target
    - task: update-build-service-image
      params:
        KUBECONFIG_JSON: ((common-secrets.kubeconfigBuildServer))
      input_mapping:
        target: target
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
            tag: latest
        inputs:
          - name: target
        run:
          path: /bin/bash
          args:
            - -c
            - |
              docker login ((common-secrets.harborDomain)) -u '((common-secrets.harborUser))' -p '((common-secrets.harborPassword))'
              echo $KUBECONFIG_JSON>tools-kubeconfig.json
              export KUBECONFIG=tools-kubeconfig.json
              kubectl config set-credentials concourse --token=((common-secrets.kubernetesServiceAccountToken))
              kubectl config set-context concourse-context --cluster=((common-secrets.kubernetesBuildCluster)) --user=concourse
              kubectl config use-context concourse-context
              set +e
              kp image list -n ((tanzu-edge-pos-service.tbsNamespace)) | grep "tanzu-edge-pos-service" 
              exists=$?
              set -e

              kubectl -n concourse-main get all

              if [ $exists -eq 0 ]; then
                kp image patch tanzu-edge-pos-service \
                  --namespace ((tanzu-edge-pos-service.tbsNamespace)) \
                  --wait \
                  --local-path target/pos-data-service-0.0.1-SNAPSHOT.jar
              else
                kp image create tanzu-edge-pos-service \
                  --tag ((tanzu-edge-pos-service.image)) \
                  --namespace ((tanzu-edge-pos-service.tbsNamespace)) \
                  --wait \
                  --local-path target/pos-data-service-0.0.1-SNAPSHOT.jar
              fi


- name: bootstrap-in-store-services  
  public: true
  serial: true
  plan:
    - get: config-repo
      trigger: true
    - task: deploy-rabbitmq
      params:
        KUBECONFIG_JSON: ((common-secrets.kubeconfigDeployServer))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            tag: latest
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
        inputs:
          - name: config-repo
        run:
          path: /bin/bash
          args:
            - -c
            - |
              # TODO Need to setup the kubeconfig
              echo $KUBECONFIG_JSON>run-kubeconfig.json
              export KUBECONFIG=run-kubeconfig.json
              kubectl config set-credentials concourse --token=((common-secrets.kubernetesDeployServiceAccountToken))
              kubectl config set-context concourse-context --cluster=((common-secrets.kubernetesDeployCluster)) --user=concourse
              kubectl config use-context concourse-context
              # kubectl create namespace edge-data-services
              pivnet login --api-token=((common-secrets.pivnetApiToken))
              pivnet download-product-files --product-slug='p-rabbitmq-for-kubernetes' --release-version='1.0.0' --product-file-id=866685
              
              mkdir rabbitmq-operator
              tar -xvf tanzu-rabbitMQ-for-kubernetes-1.0.0.tar -C rabbitmq-operator
              export RABBIT_OPERATOR_MANIFEST=`pwd`/rabbitmq-operator/release-artifacts/manifests/cluster-operator.yml

              # cleenup previous
              kubectl delete ns rabbitmq-system
              kubectl delete ns edge-data-services

              kubectl create -f $RABBIT_OPERATOR_MANIFEST
              kubectl create ns edge-data-services 
              kubectl -n edge-data-services create configmap definitions --from-file='def.json=config-repo/k8s/sender/rabbit-definitions.json'
              kubectl create -f config-repo/k8s/sender/edge-pos-messaging.yaml -n edge-data-services

- name: continuous-deployment
  public: true
  serial: true
  plan:
    - get: app-image
      trigger: true
    - get: config-repo
    - task: create-wavefront-event
      params:
        WAVEFRONT_API_TOKEN: ((tanzu-edge-pos-service.wavefrontApiToken))
        WAVEFRONT_URL: ((tanzu-edge-pos-service.wavefrontUri))
        WAVEFRONT_DEPLOY_EVENT_NAME: ((tanzu-edge-pos-service.wavefrontDeployEventName))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
            tag: latest
        run:
          path: /bin/bash
          args:
            - -c
            - |
              set -euo pipefail

              START_TIME=$(date +%s000)
              sleep 1
              END_TIME=$(date +%s000)

              curl \
                -X POST \
                --header "Content-Type: application/json" \
                --header "Accept: application/json" \
                --header "Authorization: Bearer ${WAVEFRONT_API_TOKEN}" \
                -d "{
                  \"name\": \"${WAVEFRONT_DEPLOY_EVENT_NAME}\",
                  \"annotations\": {
                    \"severity\": \"info\",
                    \"type\": \"image deploy\",
                    \"details\": \"new tanzu-edge-pos-service image deployed\"
                  },
                  \"startTime\": "${START_TIME}",
                  \"endTime\": "${END_TIME}"
                }" "${WAVEFRONT_URL}/api/v2/event"

    - task: deploy-app
      params:
        KUBECONFIG_JSON: ((common-secrets.kubeconfigDeployServer))
        SERVERLESS: ((tanzu-edge-pos-service.serverless))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            tag: latest
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
        inputs:
          - name: config-repo
          - name: app-image
        run:
          path: /bin/bash
          args:
            - -c
            - |
              export DIGEST=$(cat app-image/digest)

              # TODO Need to setup the kubeconfig
              echo $KUBECONFIG_JSON>run-kubeconfig.json
              export KUBECONFIG=run-kubeconfig.json
              kubectl config set-credentials concourse --token=((common-secrets.kubernetesDeployServiceAccountToken))
              kubectl config set-context concourse-context --cluster=((common-secrets.kubernetesDeployCluster)) --user=concourse
              kubectl config use-context concourse-context

              export EDGE_RMQ_USERNAME=$(kubectl -n edge-data-services get secret edge-pos-messaging-default-user -o jsonpath='{.data.username}' | base64 --decode)
              export EDGE_RMQ_PSWD=$(kubectl -n edge-data-services get secret edge-pos-messaging-default-user -o jsonpath='{.data.password}' | base64 --decode) 

              # for now only one store
              export i=100
              if [ "$SERVERLESS" = "true" ]; then
                 ytt -f config-repo/k8s/sender/values.yml -f config-repo/k8s/sender/knative-service.yaml -v storeId=store-${i} -v rabbitmq_password=${EDGE_RMQ_PSWD} -v rabbitmq_username=${EDGE_RMQ_USERNAME} \
                    -v image=((tanzu-edge-pos-service.image))@$DIGEST -v ingressDomain='apps.edge.wrightcode.io' > myservice.yaml
                    kn service create -f myservice.yaml -n apps --force
              else
                 ytt -f config-repo/k8s/sender/values.yml -f config-repo/k8s/sender/configmap.yaml -f config-repo/k8s/sender/deployment.yaml -f config-repo/k8s/sender/svc.yaml \
                    -v storeId=store-${i} -v rabbitmq_password=${EDGE_RMQ_PSWD} -v rabbitmq_username=${EDGE_RMQ_USERNAME} \
                    -v image=((tanzu-edge-pos-service.image))@$DIGEST -v ingressDomain='apps.edge.wrightcode.io' | kapp deploy -n edge-store -a pos-service -y -f -
              fi

